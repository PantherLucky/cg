#include<windows.h>
#include<glut.h>
#include<iostream>
using namespace std;
GLfloat angle;
void triangle()
{
glBegin(GL_LINE_LOOP);
glVertex2i(100, 250);
glVertex2i(175, 350);
glVertex2i(250, 250);
glEnd();
glFlush();
}
void display()
{
glClear(GL_COLOR_BUFFER_BIT);
glClearColor(1, 1, 1, 1);
glMatrixMode(GL_MODELVIEW);
glLoadIdentity();
triangle();
glRotatef(angle, 0.0, 0.0, 1.0);
glTranslatef(-100, -250, 0.0);
triangle();
glMatrixMode(GL_MODELVIEW);
glLoadIdentity();
glTranslatef(100, 250, 0.0);
glRotatef(angle, 0.0, 0.0, 1.0);
glTranslatef(-100, -250, 0.0);
triangle();
}
int main(int argc, char** argv)
{
cout << "Enter the angle of rotation";
cin >> angle;
glutInit(&argc, argv);
glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
glutInitWindowSize(600, 600);
glutCreateWindow("1GA18CS109_PROGRAM2");
glMatrixMode(GL_PROJECTION);
glLoadIdentity();
gluOrtho2D(0, 500, 0, 500);
glutDisplayFunc(display);
glutMainLoop();
}
glFlush(); glutSwapBuffers();
}
void spinCube()
{
theta[axis] += 0.05;
if (theta[axis] > 360.0) theta[axis] -= 360.0;
glutPostRedisplay();
}
void mouse(int btn, int state, int x, int y)
if (btn == GLUT_LEFT_BUTTON && state ==
GLUT_DOWN) axis = 0;
if (btn == GLUT_MIDDLE_BUTTON && state ==
GLUT_DOWN) axis = 1;
if (btn == GLUT_RIGHT_BUTTON && state ==
GLUT_DOWN) axis = 2;
}
void myReshape(int w, int h)
{
glViewport(0, 0, w, h); glMatrixMode(GL_PROJECTION);
glLoadIdentity();
if (w <= h)
glOrtho(-2.0, 2.0, -2.0 * (GLfloat)h / (GLfloat)w, 2.0 *
(GLfloat)h / (GLfloat)w, -10.0, 10.0);
else
glOrtho(-2.0 * (GLfloat)w / (GLfloat)h, 2.0 * (GLfloat)w
/ (GLfloat)h, -2.0, 2.0, -10.0, 10.0);
glMatrixMode(GL_MODELVIEW);
}
void main(int argc, char** argv)
{
glutInit(&argc, argv);
glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB |
GLUT_DEPTH);
glutInitWindowSize(500, 500);
glutCreateWindow("1GA18CS109");
glutReshapeFunc(myReshape);
glutDisplayFunc(display);
glutIdleFunc(spinCube); glutMouseFunc(mouse);
glEnable(GL_DEPTH_TEST);
glutMainLoop();
}
